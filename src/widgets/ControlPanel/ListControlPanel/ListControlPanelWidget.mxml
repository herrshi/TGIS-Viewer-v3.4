<?xml version="1.0" encoding="utf-8"?>
<TGISViewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:TGISViewer="cn.seisys.TGISViewer.*" 
		 xmlns:ControlPanel="widgets.ControlPanel.*"
		 xmlns:ListControlPanel="widgets.ControlPanel.ListControlPanel.*" 
		 creationComplete="this_creationCompleteHandler(event)" 
		 widgetConfigLoaded="this_widgetConfigLoadedHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.ItemRenderer;
			
			import cn.seisys.TGISViewer.AppEvent;
			import cn.seisys.TGISViewer.WidgetStates;
			import cn.seisys.TGISViewer.utils.Hashtable;
			
			[Bindable]
			private var _menuItemAC:ArrayCollection;
			
			[Bindable]
			private var _menuListItemAC:ArrayCollection;
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				_menuItemAC = new ArrayCollection();
				_menuListItemAC = new ArrayCollection();
				
				AppEvent.addListener( AppEvent.OPEN_MENU, appevent_openMenuHandler );
			}
			
			protected function this_widgetConfigLoadedHandler(event:Event):void
			{
				if ( configXML )
				{
					var configListMenuItems:Array = [];
					
					//先从配置文件中读取所有的菜单项，每个菜单项一个对象
					var menuXML:XML = configXML.menu[0];
					for ( var i:uint = 0; i < menuXML.children().length(); i++ )
					{
						var menuItemXML:XML = menuXML.children()[ i ];
						if ( menuItemXML.name() == "itemgroup" )
						{
							var itemGroupXMLList:XMLList = XMLList( menuItemXML );
							createMenuItem(  itemGroupXMLList.item, true, itemGroupXMLList.item.length(), itemGroupXMLList.@label );
						}
						else
						{
							var itemXMLList:XMLList = XMLList( menuItemXML );
							createMenuItem( itemXMLList, false );
						}
					}
					
					//整理菜单项，每个顶级菜单项一个对象，结果绑定到listMenuItemDataGroup
					var menuItem:MenuItem;
					for ( i = 0; i < configListMenuItems.length; )
					{
						//有子菜单
						if ( configListMenuItems[ i ].grouped )
						{
							var groupMenuItemArray:Array = [];
							
							var groupLength:uint = configListMenuItems[ i ].groupLength;
							for ( var j:uint = 0; j < groupLength; j++ )
							{
								groupMenuItemArray.push( 
									{ 
										menuItem: configListMenuItems[ i + j ], 
										open: configListMenuItems[ i + j ].open 
									} 
								);
							}
							
							menuItem = new MenuItem();
							menuItem.isGroup = true;
							menuItem.label = configListMenuItems[ i ].groupLabel;
							menuItem.groupMenuItems = groupMenuItemArray;
							
							_menuItemAC.addItem( menuItem );
							
							//移到下一组group
							i += groupLength;
						}
						else
						{
							menuItem = new MenuItem();
							menuItem.isGroup = false;
							menuItem.label = configListMenuItems[ i ].label;
							menuItem.open = configListMenuItems[ i ].open;
							menuItem.functionArray = configListMenuItems[ i ].functionArray;
							
							_menuItemAC.addItem( menuItem );
							
							i++;
						}
					}
					
					function createMenuItem( itemList:XMLList, grouped:Boolean, groupLength:uint = 0, groupLabel:String = "" ):void
					{
						for each ( var itemXML:XML in itemList )
						{
							var label:String = itemXML.@label;
							var open:Boolean = ( itemXML.@initenable == "true" ? true : false );
							
							var functionList:XMLList = itemXML..clickfunction;
							var functionArray:Array = [];
							for each ( var functionXML:XML in functionList )
							{
								var functionName:String = functionXML.@name;
								var paramList:XMLList = functionXML..param;
								var paramTable:Hashtable = new Hashtable();
								for each ( var paramXML:XML in paramList )
								{
									var paramName:String = paramXML.@name;
									var paramValue:String = paramXML.@value;
									paramTable.add( paramName, paramValue );
								}
								var clickFunctionObj:Object = 
									{
										name: functionName,
										paramTable: paramTable
									}
								functionArray.push( clickFunctionObj );
							}
							
							var configItemObj:Object = 
								{ 
									grouped: grouped,
									groupLength: groupLength,
									groupLabel: groupLabel,
									label: label,
									open: open,
									functionArray: functionArray
								};
							configListMenuItems.push( configItemObj );
						}
					}
				}
			}
			
			private function appevent_openMenuHandler( event:AppEvent ):void
			{
				var menuName:String = event.data as String;
				//打开一个菜单是关闭其他菜单
				if ( menuName != widgetTitle )
				{
					setState( WidgetStates.WIDGET_CLOSED );
				}
			}
			
			protected function menuItemDG_listMenuItemClickHandler(event:Event):void
			{
				var menuItem:MenuItem = ItemRenderer( event.target ).data as MenuItem;
				if ( menuItem.isGroup )
				{
					_menuListItemAC = new ArrayCollection();
					for each ( var menuObj:Object in menuItem.groupMenuItems )
					{
						var groupMenuItem:MenuItem = new MenuItem();
						groupMenuItem.label = menuObj.menuItem.label;
						groupMenuItem.open = menuObj.menuItem.open;
						groupMenuItem.functionArray = menuObj.menuItem.functionArray;
						
						_menuListItemAC.addItem( groupMenuItem );
					}
					menuListContainer.visible = menuListContainer.includeInLayout = true;
				}
				else
				{
					menuItem.open = !menuItem.open;
					addMenuListItemClickHandler( menuItem );
				}
			}
			
			[Bindable]
			private var xOver:int;
			
			protected function menuItemDG_listMenuItemMouseOutHandler(event:Event):void
			{
				
			}
			
			protected function menuItemDG_listMenuItemMouseOverHandler(event:Event):void
			{
				var pointGlobal:Point = ItemRenderer( event.target).localToGlobal( new Point( 0, 0 ) );
				// get the local coordinates where the menuItem will be shown
				var pointLocal:Point = menuGroup.globalToLocal( pointGlobal );
				xOver = pointLocal.x;
				
				menuListContainer.visible = menuListContainer.includeInLayout = false;
			}
			
			protected function menuListDG_menuListItemClickHandler(event:Event):void
			{
				var menuItem:MenuItem = ItemRenderer( event.target ).data as MenuItem;
				menuItem.open = !menuItem.open;
				
				for each ( var fatherMenuItem:MenuItem in _menuItemAC )
				{
					if ( fatherMenuItem.isGroup )
					{
						for each ( var menuObj:Object in fatherMenuItem.groupMenuItems )
						{
							if ( menuObj.menuItem.label == menuItem.label )
							{
								menuObj.menuItem.open = menuItem.open;
								break;
							}
						}
					}
				}
				
				addMenuListItemClickHandler( menuItem );
			}
			
			private function addMenuListItemClickHandler( menuItem:MenuItem ):void
			{
				var functionArray:Array = menuItem.functionArray;
				for each ( var clickFunctionObj:Object in functionArray ) 
				{
					var functionName:String = clickFunctionObj.name;
					var paramTable:Hashtable = clickFunctionObj.paramTable;
					var widgetName:String;
					var widgetState:String;
					switch( functionName.toLowerCase() )
					{
						//按钮enable时显示图层，按钮disable时隐藏图层
						case "changelayer":
							var serviceName:String = paramTable.find( "ServiceName" );
							var idString:String = paramTable.find( "LayerId" );
							AppEvent.dispatch( AppEvent.CHANGE_LAYER_VISIBILITY_BY_NAME, 
								{ 
									serviceName: serviceName,
									layerIds: idString,
									visible: menuItem.open
								} 
							);
							break;
						
						//按钮enable时打开组件，按钮disable时关闭组件
						case "changewidget":
							widgetName = paramTable.find( "WidgetName" );
							widgetState = paramTable.find( "WidgetState" );
							if ( menuItem.open )
							{
								AppEvent.dispatch( AppEvent.WIDGET_RUN, widgetName );
								if ( widgetState && widgetState != "" )
								{
									AppEvent.dispatch( AppEvent.WIDGET_CHANGE_STATE, 
										{ 
											label: widgetName,
											state: widgetState
										} );
								}
							}
							else
							{
								AppEvent.dispatch( AppEvent.WIDGET_CLOSE, widgetName );
							}
							break;
						
						case "changeoverlayvisible":
							var overlayType:String = paramTable.find( "OverlayType" );
							AppEvent.dispatch( AppEvent.CHANGE_OVERLAY_VISIBLE, 
								{ 
									type: overlayType, 
									visible: menuItem.open 
								} 
							);
							break;
						
						//按钮enable时打开组件，按钮disable时不关闭组件
						case "openwidget":
							widgetName = paramTable.find( "WidgetName" );
							widgetState = paramTable.find( "WidgetState" );
							if ( menuItem.open )
							{
								AppEvent.dispatch( AppEvent.WIDGET_RUN, widgetName );
								if ( widgetState && widgetState != "" )
								{
									AppEvent.dispatch( AppEvent.WIDGET_CHANGE_STATE, 
										{ 
											label: widgetName,
											state: widgetState
										} );
								}
							}
							break;
						
						//按钮enable时不打开组件，按钮disable时关闭组件
						case "closewidget":
							widgetName = paramTable.find( "WidgetName" );
							if ( !menuItem.open )
							{
								AppEvent.dispatch( AppEvent.WIDGET_CLOSE, widgetName );
							}
							break;
						
						//点击按钮时通知页面
						case "informstatechanged":
							var type:String = paramTable.find( "type" );
							AppEvent.dispatch( AppEvent.EXTERNALINTERFACE_CALL, 
								{ 
									functionName: "mapButtonStateChanged", 
									params: [ type, menuItem.open ] 
								} 
							);
					}
				}
			}
			
			protected function menuListContainer_rollOutHandler(event:MouseEvent):void
			{
				menuListContainer.visible = menuListContainer.includeInLayout = false;
			}
			
		]]>
	</fx:Script>
	<s:Group>
		<s:Group id="menuGroup">
			<s:Rect width="100%" height="100%"
					alpha="1">
				<s:fill>
					<s:SolidColor color="0x606268"/>
				</s:fill>
			</s:Rect>
			
			<ListControlPanel:MenuItemDataGroup id="menuItemDG" 
												width="100%" 
												horizontalCenter="0"
												dataProvider="{_menuItemAC}" 
												menuItemClick="menuItemDG_listMenuItemClickHandler(event)" 
												menuItemMouseOver="menuItemDG_listMenuItemMouseOverHandler(event)"
												menuItemMouseOut="menuItemDG_listMenuItemMouseOutHandler(event)" >
				<ListControlPanel:layout>
					<s:HorizontalLayout gap="0"
										useVirtualLayout="true"
										verticalAlign="middle" paddingTop="5" paddingBottom="5"/>
				</ListControlPanel:layout>
			</ListControlPanel:MenuItemDataGroup>
		</s:Group>
		
		
		<s:BorderContainer id="menuListContainer" 
						   x="{xOver}" y="{menuItemDG.height}"
						   width="{menuListDG.width+4}" height="{menuListDG.height+2}"
						   backgroundColor="0x606268"
						   borderVisible="false"
						   visible="false" includeInLayout="false" 
						   rollOut="menuListContainer_rollOutHandler(event)">
			<ListControlPanel:MenuListDataGroup id="menuListDG" 
												width="100"
												dataProvider="{_menuListItemAC}"
												focusEnabled="false" tabChildren="true" 
												menuListItemClick="menuListDG_menuListItemClickHandler(event)">
				<ListControlPanel:layout>
					<s:VerticalLayout paddingTop="0"
									  gap="0"
									  useVirtualLayout="true"
									  horizontalAlign="center"/>
				</ListControlPanel:layout>
			</ListControlPanel:MenuListDataGroup>
		</s:BorderContainer>
	</s:Group>
	
</TGISViewer:BaseWidget>
