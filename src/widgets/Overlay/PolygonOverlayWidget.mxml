<?xml version="1.0" encoding="utf-8"?>
<TGISViewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:TGISViewer="cn.seisys.TGISViewer.*" 
					   layout="absolute" 
					   widgetConfigLoaded="this_widgetConfigLoadedHandler(event)" 
					   creationComplete="this_creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.renderers.IRenderer;
			
			import mx.events.FlexEvent;
			
			import cn.seisys.TGISViewer.AppEvent;
			import cn.seisys.TGISViewer.components.PopUpInfoWithButtons;
			import cn.seisys.TGISViewer.utils.PopUpInfoParser;
			import cn.seisys.TGISViewer.utils.RendererParser;
			
			private var _polygonType:String;
			private var _polygonOverlayLayer:GraphicsLayer;
			
			/**
			 * 弹出窗样式。 
			 * 编辑模式时禁用弹出窗，非编辑模式时启动弹出窗
			 * */
			private var _popUpRenderer:ClassFactory;
			
			/**
			 * 组件启动时调用的js函数，通知页面启动完成。
			 * */
			private var _widgetRunNotifyFunctionName:String;
			/**
			 * 组件关闭时调用的js函数，通知页面组件关闭。
			 * */
			private var _widgetCloseNotifyFunctionName:String;
			
			protected function this_widgetConfigLoadedHandler(event:Event):void
			{
				if ( configXML )
				{
					//type
					_polygonType = configXML.type;
					
					//popup
					if ( configXML.popup[0] )
					{
						var popupXML:XML = configXML.popup[0];
						var popUpInfo:PopUpInfoWithButtons = PopUpInfoParser.parsePopUpInfo( popupXML );
						
						_popUpRenderer = new ClassFactory( PopUpRenderer );
						_popUpRenderer.properties = 
							{ 
								popUpInfo: popUpInfo
							};
						_polygonOverlayLayer.infoWindowRenderer = _popUpRenderer;
					}
					
					//renderer
					var rendererParser:RendererParser = new RendererParser;
					var renderer:IRenderer = rendererParser.parseRenderer( configXML );
					_polygonOverlayLayer.renderer = renderer;
					
					_widgetRunNotifyFunctionName = configXML.widgetrunnotify;
					_widgetCloseNotifyFunctionName = configXML.widgetclosenotify;
					
					if ( _widgetRunNotifyFunctionName != "" )
					{
						//通知页面组件创建完成
						AppEvent.dispatch( 
							AppEvent.EXTERNALINTERFACE_CALL, 
							{ functionName: _widgetRunNotifyFunctionName } 
						);
					}
				}
			}
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				_polygonOverlayLayer = new GraphicsLayer();
				_polygonOverlayLayer.name = widgetTitle;
				map.addLayer( _polygonOverlayLayer );
				
				AppEvent.addListener( AppEvent.WIDGET_RUN, appevent_widgetRunHandler );
				AppEvent.addListener( AppEvent.WIDGET_CLOSE, appevent_widgetCloseHandler );
				
				AppEvent.addListener( AppEvent.ADD_POLYGONS, appevent_addPolygonsHandler );
				AppEvent.addListener( AppEvent.DELETE_POLYGONS, appevent_deletePolygonsHandler );
				AppEvent.addListener( AppEvent.DELETE_ALL_POLYGONS, appevent_deleteAllPolygonsHandler );
			}
			
			private function appevent_widgetRunHandler( event:AppEvent ):void
			{
				if ( ( event.data as int == widgetId ) || ( event.data as String == widgetTitle ) )
				{
					map.addLayer( _polygonOverlayLayer );
					if ( _widgetRunNotifyFunctionName != "" )
					{
						//通知页面组件创建完成
						AppEvent.dispatch( 
							AppEvent.EXTERNALINTERFACE_CALL, 
							{ functionName: _widgetRunNotifyFunctionName } );
					}
				}
			}
			
			private function appevent_widgetCloseHandler( event:AppEvent ):void
			{
				if ( ( event.data as int == widgetId ) || ( event.data as String == widgetTitle ) )
				{
					_polygonOverlayLayer.clear();
					map.removeLayer( _polygonOverlayLayer );
					if ( _widgetRunNotifyFunctionName != "" )
					{
						//通知页面组件关闭
						AppEvent.dispatch( 
							AppEvent.EXTERNALINTERFACE_CALL, 
							{ functionName: _widgetCloseNotifyFunctionName } 
						);
					}
				}
			}
			
			private function appevent_addPolygonsHandler( event:AppEvent ):void
			{
				var params:String = event.data as String;
				var paramObj:Object = JSON.parse( params );
				
				//类型
				var type:String = paramObj.type;
				if ( !type || type.toLowerCase() != _polygonType.toLowerCase() )
					return;
				
				var polygonArray:Array = paramObj.polygons;
				for each ( var polygonObj:Object in polygonArray )
				{
					var id:String = polygonObj.id;
					var geometryObj:Object = polygonObj.geometry;
					var polygon:Polygon;
					
					if ( !id || id == "" )
					{
						continue;
					}
					
					var graphic:Graphic = getGraphicById( id );
					if ( graphic )
					{
						//若已经存在此点且传入坐标则更新位置，否则只更新属性
						if ( geometryObj )
						{
							polygon = Polygon.fromJSON( geometryObj );
							graphic.geometry = new MapPoint( x, y );
						}
					}
					else
					{
						//若不存在此点且传入坐标则新建，否则退出
						if ( geometryObj )
						{
							polygon = Polygon.fromJSON( geometryObj );
							graphic = new Graphic( polygon );
							graphic.id = id;
							_polygonOverlayLayer.add( graphic );
						}
						else
						{
							continue;
						}
						
					}
					
					var fields:Object = polygonObj.fields;
					if ( fields )
					{
						graphic.attributes = fields;
					}
					
				}
			}
			
			/**
			 * 在当前显示graphic中找到id对应的graphic
			 * */
			private function getGraphicById( id:String ):Graphic
			{
				for each ( var graphic:Graphic in _polygonOverlayLayer.graphicProvider )
				{
					if ( id == graphic.id )
					{
						return graphic;
					}
				}
				return null;
			}
			
			private function appevent_deletePolygonsHandler( event:AppEvent ):void
			{
				
			}
			
			private function appevent_deleteAllPolygonsHandler( event:AppEvent ):void
			{
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
</TGISViewer:BaseWidget>
