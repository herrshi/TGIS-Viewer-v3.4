<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// 信访点区域分布图
// 需要一个点图层和一个面图层，按照每个面元素中点的数量，配置面的symbol
// 所有颜色保存在配置文件中，根据点数量的最大值和最小值决定每个区(max-min)/colorCount
// 然后再根据颜色和区间动态生成ClassBreaksRenderer
// 如果设置了标注点图层，则在标注点的位置显示标注（名称，类型，数量）
///////////////////////////////////////////////////////////////////////////
-->
<TGISViewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:TGISViewer="cn.seisys.TGISViewer.*" 
					   xmlns:esri="http://www.esri.com/2008/ags"
					   layout="absolute" 
					   width="100%" height="100%" 
					   widgetConfigLoaded="this_widgetConfigLoadedHandler(event)" 
					   creationComplete="this_creationCompleteHandler(event)" 
					   preinitialize="this_preinitializeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import cn.seisys.TGISViewer.AppEvent;
			import cn.seisys.TGISViewer.utils.Hashtable;
			
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.ZoomEvent;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.renderers.ClassBreaksRenderer;
			import com.esri.ags.renderers.supportClasses.ClassBreakInfo;
			import com.esri.ags.symbols.FillSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			/**
			 * 查询信访点图层
			 * */
			private var _xfdQueryTask:QueryTask;
			
			/**
			 * 保存信访点图层的query结果(graphic)
			 * */
			private var _xfdGraphicAC:ArrayCollection;
			
			/**
			 * 信访点图层中的表示信访类型的字段
			 * 用于统计饼图
			 * */
			private var _xfdTypeField:String;
			
			/**
			 * 信访点图层中所有可能的类型值
			 * 不在其中的值归到"其他"
			 * */
			private var _xfdTypeValueArray:Array;
			
			/**
			 * 信访点图层中区县名图层
			 * */
			private var _xfdDistrictNameField:String;
			
			/**
			 * 信访点图层中街道名图层
			 * */
			private var _xfdBlockNameField:String;
			
			/**
			 * 按所属区县整理的信访点
			 * key为区县名，data为信访点array
			 * 直接在信访点图层写入区县名，不再做GeometryService.relation
			 * */
			private var _xfdTable:Hashtable;
			private var _xfdTable2:Hashtable;
			
			/**
			 * 查询区县图层
			 * */
			private var _districtQueryTask:QueryTask;
			
			/**
			 * 显示不同颜色区县的GraphicsLayer
			 * */
			private var _districtLayer:GraphicsLayer;
			
			/**
			 * 保存区县图层query结果(graphic)
			 * */
			private var _districtGraphicAC:ArrayCollection;
			
			/**
			 * 区县图层中的名称字段，和标注点图层中的名称字段(_labelPointLayerNameField)对应
			 * */
			private var _districtLayerNameField:String;
			
			private var _districtLayerNameField2:String;
			
			/**
			 * 每个区信访点分类统计
			 * */
			private var _districtTypeCountTable:Hashtable;
			
			/**
			 * 每个街道访点分类统计
			 * */
			private var _blockTypeCountTable:Hashtable;
			
			/**
			 * 每个区信访点总数
			 * */
			private var _districtTotalCountAC:ArrayCollection;
			
			/**
			 * 每个街道信访点总数
			 * */
			private var _blockTotalCountAC:ArrayCollection;
			
			/**
			 * 区县渐变色
			 * */
			private var _districtGradientColorArray:Array;
			
			/**
			 * 查询标注点图层
			 * */
			private var _labelPointQueryTask:QueryTask;
			
			/**
			 * 保存标注点图层查询结果
			 * */
			private var _labelPointGraphicAC:ArrayCollection;
			
			/**
			 * 显示文字标注的图层
			 * */
			private var _labelLayer:GraphicsLayer;
			
			/**
			 * 标注点图层中的名称字段，和区县图层中的名称字段(_districtLayerNameField)对应
			 * */
			private var _labelPointLayerNameField:String
			
			/**
			 * 标注放置位置
			 * */
			private var _labelPlacementField:String;
			
			/**
			 * 查询街道图层
			 * */
			private var _blockQueryTask:QueryTask;
			
			/**
			 * 显示不同颜色街道的GraphicsLayer
			 * */
			private var _blockLayer:GraphicsLayer;
			
			/**
			 * 显示单一街道的GraphicsLayer
			 * */
			private var _streetLayer:GraphicsLayer;
			
			/**
			 * 用于geometryService.relation的Polygon数组（不是graphic，是graphic.geometry）
			 * */
			private var _blockGeometryArray:Array;
			
			/**
			 * 保存区县图层query结果(graphic)
			 * */
			private var _blockGraphicAC:ArrayCollection;
			
			/**
			 * 区县图层中的名称字段，和标注点图层中的名称字段(_labelPointLayerNameField)对应
			 * */
			private var _blockLayerNameField:String;
			
			/**
			 * 街道渐变色
			 * */
			private var _blockGradientColorArray:Array;
			
			/**
			 * flex的bug，在module里使用chart需要 从主程序复制styleDeclaration
			 * */
			protected function this_preinitializeHandler(event:FlexEvent):void
			{
				var styleObjects:Array = FlexGlobals.topLevelApplication.styleManager.selectors;
				for each(var styleObj:String in styleObjects)  {
					var style:CSSStyleDeclaration = 
						FlexGlobals.topLevelApplication.styleManager.getStyleDeclaration(styleObj);
					styleManager.setStyleDeclaration(styleObj, style, true);
				}
			}
			
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				map.addEventListener( ZoomEvent.ZOOM_END, map_zoomEndHandler );
				
				AppEvent.addListener( AppEvent.WIDGET_RUN, appevent_WidgetRunHandler );
				AppEvent.addListener( AppEvent.WIDGET_CLOSE, appevent_WidgetCloseHandler );
				
				AppEvent.addListener( AppEvent.HUANBAOJU_QUERYEXPRESSION_TIME, 
					appevent_queryExpressionTimeHandler );
				AppEvent.addListener( AppEvent.HUANBAOJU_QUERYEXPRESSION_TYPE, 
					appevent_queryExpressionTypeHandler );
				AppEvent.addListener( AppEvent.HUANBAOJU_DISTRICT_SELECTED, 
					appevent_HuanBaoJuDistrictSelectedHandler );
				AppEvent.addListener( AppEvent.HUANBAOJU_BLOCK_SELECTED, 
					appevent_HuanBaoJuBlockSelectedHandler );
				
				_xfdGraphicAC = new ArrayCollection();
				_labelPointGraphicAC = new ArrayCollection();
				_districtGraphicAC = new ArrayCollection();
				_blockGraphicAC = new ArrayCollection();
				_districtTotalCountAC = new ArrayCollection();
				_blockTotalCountAC = new ArrayCollection();
				
				_xfdTable = new Hashtable();
				_xfdTable2 = new Hashtable();
				
				_districtLayer = new GraphicsLayer();
				_districtLayer.id = "colorRendererPolygonLayer";
				_districtLayer.name = "区县层";
				map.addLayer( _districtLayer );
				map.reorderLayer( "colorRendererPolygonLayer", 3 );
				
				_blockLayer = new GraphicsLayer();
				_blockLayer.id = "blockRendererPolygonLayer";
				_blockLayer.name = "街道层";
				map.addLayer( _blockLayer );
				
				_streetLayer = new GraphicsLayer();
				_streetLayer.id = "streetRendererPolygonLayer";
				_streetLayer.name = "最底层";
				map.addLayer( _streetLayer );
				
				_labelLayer = new GraphicsLayer();
				_labelLayer.id = "labelRendererPolygonLayer";
				_labelLayer.name = "标注层";
				map.addLayer( _labelLayer );
			}
			
			protected function this_widgetConfigLoadedHandler(event:Event):void
			{
				if ( configXML )
				{
					//信访点配置
					var xfdLayerUrl:String = configXML.xfdlayer.url;
					if ( xfdLayerUrl )
					{
						xfdLayerUrl = xfdLayerUrl.replace( "{serverip}", configData.arcgisServerIP );
						
						_xfdTypeField = configXML.xfdlayer.typefield;
						var typeValues:String = configXML.xfdlayer.typevalue;
						_xfdTypeValueArray = typeValues.split( "," );
						
						_xfdDistrictNameField = configXML.xfdlayer.districtnamefield;
						_xfdBlockNameField = configXML.xfdlayer.blocknamefield;
						
						_xfdQueryTask = new QueryTask( xfdLayerUrl );
						_xfdQueryTask.disableClientCaching = true;
						queryXFD( "信访日期  >= date '2013-12-01' AND 信访日期  <= date '2013-12-31'" );
					}
					
					//区县配置
					var districtLayerUrl:String = configXML.districtlayer.url;
					if ( districtLayerUrl )
					{
						_districtLayerNameField = configXML.districtlayer.districtnamefield;
						
						districtLayerUrl = districtLayerUrl.replace( "{serverip}", configData.arcgisServerIP );
						
						_districtQueryTask = new QueryTask( districtLayerUrl );
						_districtQueryTask.disableClientCaching = true;
						
						//渐变色
						var gradientColorString:String = configXML.districtlayer.gradientcolor;
						_districtGradientColorArray = gradientColorString.split( "," );
					}
					
					//标注点配置
					var labelLayerUrl:String = configXML.labellayer.url;
					if ( labelLayerUrl )
					{
						_labelPointLayerNameField = configXML.labellayer.labelpointnamefield;//name
						_labelPlacementField = configXML.labellayer.labelplacementfield;//labelDirec
						
						labelLayerUrl = labelLayerUrl.replace( "{serverip}", configData.arcgisServerIP );
						_labelPointQueryTask = new QueryTask( labelLayerUrl );
						queryLabels();
					}
					
					//街道配置
					var blockLayerUrl:String = configXML.blocklayer.url;
					if ( blockLayerUrl )
					{
						_districtLayerNameField2 = configXML.blocklayer.districtnamefield;
						_blockLayerNameField = configXML.blocklayer.blocknamefield;
						
						blockLayerUrl = blockLayerUrl.replace( "{serverip}", configData.arcgisServerIP );
						
						_blockQueryTask = new QueryTask( blockLayerUrl );
						_blockQueryTask.disableClientCaching = true;
						
						gradientColorString = configXML.blocklayer.gradientcolor;
						_blockGradientColorArray = gradientColorString.split( "," );
					}
				}
			}
			
			private function appevent_WidgetRunHandler( event:AppEvent ):void
			{
				if ( ( event.data as int == widgetId ) || ( event.data as String == widgetTitle ) )
				{
					map.addEventListener( ZoomEvent.ZOOM_END, map_zoomEndHandler );
					map.addLayer( _districtLayer );//区县图
					map.addLayer( _blockLayer );//街道图
					map.addLayer( _streetLayer );//最底图
					map.addLayer( _labelLayer );//标注层
				}
			}
			
			private function appevent_WidgetCloseHandler( event:AppEvent ):void
			{
				if ( ( event.data as int == widgetId ) || ( event.data as String == widgetTitle ) )
				{
					map.removeEventListener( ZoomEvent.ZOOM_END, map_zoomEndHandler );
					map.removeLayer( _districtLayer );//区县图
					map.removeLayer( _blockLayer );//街道图
					map.removeLayer( _streetLayer );//最底图
					map.removeLayer( _labelLayer );//标注层
				}
			}
			
			private function map_zoomEndHandler( event:ZoomEvent ):void
			{
				if(map.scale > 100000)
				{
					_districtLayer.visible = true;
					_blockLayer.visible = false;
					_streetLayer.visible = false;
					generateLabels();
					_streetLayer.clear();
					map.infoWindow.hide();
				}
				else
				{
					_districtLayer.visible = false;
					if(!_streetLayer.visible)
					{
						_blockLayer.visible = true;
						generateLabels2();
					}
				}
				
				//_districtLayer.visible = _labelLayer.visible = ( map.scale > 100000 ); //比例尺小于100000时显示区县和标注
//				AppEvent.dispatch( AppEvent.CHANGE_LAYER_VISIBILITY_BY_NAME, //比例尺大于100000时显示街道层
//					{ 
//						serviceName: "街道",
//						layerIds: "",
//						visible: (map.scale <= 100000)
//					} 
//				);
				
				AppEvent.dispatch( AppEvent.CHANGE_LAYER_VISIBILITY_BY_NAME, //比例尺大于100000时显示街道层
					{ 
						serviceName: "信访点",
						layerIds: "",
						visible: (map.scale <= 100000) && _streetLayer.visible
					} 
				);
			}
			
			private function queryXFD( expr:String = "1=1" ):void
			{
				cursorManager.setBusyCursor();
				//过滤信访点图层
				AppEvent.dispatch( AppEvent.SET_LAYER_FILTER_DEFINITION,  //对信访点进行图上配色
					{ 
						serviceName: "信访点",
						layerIds: "",
						whereClause: expr
					} 
				);
				
				var query:Query = new Query();
				query.returnGeometry = true;
				query.where = expr;
				query.outSpatialReference = map.spatialReference;
				query.outFields = [ "*" ];
				_xfdQueryTask.execute( query, new AsyncResponder( onResult, onFault ) );
				
				function onResult( featureSet:FeatureSet, token:Object = null ):void
				{
					_xfdGraphicAC.removeAll();
					_districtTotalCountAC.removeAll();
					_xfdTable.clear();

					for each ( var graphic:Graphic in featureSet.features )
					{
						_xfdGraphicAC.addItem( graphic );
						
						//先按区县分类，单机某个区县，再到数据里找各阶段的街道数据
						var districtName:String = graphic.attributes[ _xfdDistrictNameField ];
						var blockName:String = graphic.attributes[ _xfdBlockNameField ];
						if ( _xfdTable.containsKey( districtName ) )
						{
							var xfdGraphicArray:Array = _xfdTable.find( districtName );
							xfdGraphicArray.push( graphic );
						}
						else
						{
							_xfdTable.add( districtName, [ graphic ] );
						}
					}
					addSharedData( "xfdData", _xfdGraphicAC );
					
					//计算每个区县的总数
					for each ( districtName in _xfdTable.getKeySet() )
					{
						var districtCount:DistrictCount = new DistrictCount();
						districtCount.districtName = districtName;
						districtCount.count = (_xfdTable.find( districtName ) as Array).length;
						_districtTotalCountAC.addItem( districtCount );
					}

					//信访点从多到少排序
					var sort:Sort = new Sort();
					sort.fields = [ new SortField( "count", true ) ];
					_districtTotalCountAC.sort = sort;
					_districtTotalCountAC.refresh();
					AppEvent.dispatch( AppEvent.HUANBAOJU_DISTRICT_COUNT, _districtTotalCountAC ); //发送给下面弹出的模块进行柱状图展示
					
					queryDistrict(); //查询所有的区县名称
					//queryBlock(); //查询所有的街道名称
				}
			}
			
			private function queryDistrict():void
			{
				var query:Query = new Query();
				query.returnGeometry = true;
				query.where = "1=1";
				query.outSpatialReference = map.spatialReference;
				query.outFields = [_districtLayerNameField];
				_districtQueryTask.execute( query, new AsyncResponder( onResult, onFault ) );
				
				function onResult( featureSet:FeatureSet, token:Object = null ):void
				{
					_districtGraphicAC.removeAll();
					for each ( var graphic:Graphic in featureSet.features )
					{
						var districtName:String = graphic.attributes[ _districtLayerNameField ];
						if ( _xfdTable.containsKey( districtName ) )
						{
							var xfdCount:int = ( _xfdTable.find( districtName ) as Array ).length;
							graphic.attributes.count = xfdCount;
							_districtGraphicAC.addItem( graphic );
						}
						else
						{
							graphic.attributes.count = 0;
							_districtGraphicAC.addItem( graphic );
						}
						//对区县的Graphic进行操作
						graphic.addEventListener( MouseEvent.DOUBLE_CLICK, districtLayerGraphic_doubleClickHandler );
						
					}
					_districtLayer.graphicProvider = _districtGraphicAC; //赋值给_districtLayer进行展示
					_districtLayer.renderer = generateClassBreakRenderer( _districtGraphicAC, 
						_districtGradientColorArray, 0.8);//指定相应配色系统
					
					statisticXFDCountByType();
					generateLabels();
				}
			}
			
			//仿造,是否通过_xfdTable2去完成
			private var _currentDistrictName:String = "";
			private function queryBlock():void
			{
				//需要对地图比例尺进行监听，让_currentDistrictName = ""
				var query:Query = new Query();
				query.returnGeometry = true;
				query.where = "1=1";
				if(_currentDistrictName != "")
					query.where = _districtLayerNameField2 + "='" + _currentDistrictName + "'";
				query.outSpatialReference = map.spatialReference;
				query.outFields = [ _districtLayerNameField2,_blockLayerNameField ];
				_blockQueryTask.execute( query, new AsyncResponder( onResult, onFault ) );
				
				function onResult( featureSet:FeatureSet, token:Object = null ):void
				{
					_blockGraphicAC.removeAll();
					for each ( var graphic:Graphic in featureSet.features )
					{
						//var districtName:String = graphic.attributes[ _districtLayerNameField2 ];
						var blockName:String = graphic.attributes[ _blockLayerNameField ];
						if ( _xfdTable2.containsKey( blockName ) )
						{
							var xfdCount:int = ( _xfdTable2.find( blockName ) as Array ).length;
							graphic.attributes.count = xfdCount;
							_blockGraphicAC.addItem( graphic );
						}
						else
						{
							graphic.attributes.count = 0;
							_blockGraphicAC.addItem( graphic );
						}
						//对街道的Graphic进行操作
						graphic.addEventListener( MouseEvent.DOUBLE_CLICK, blockLayerGraphic_doubleClickHandler );
					}
					_blockLayer.graphicProvider = _blockGraphicAC; //赋值给_districtLayer进行展示
					_blockLayer.renderer = generateClassBreakRenderer( _blockGraphicAC, 
						_blockGradientColorArray, 0.8);//指定相应配色系统
					
					statisticXFDCountByType2();
					generateLabels2();
				}
			}
			
			private function onFault( fault:Fault, token:Object = null ):void
			{
				var strInfo: String = "Error: ";
				strInfo += "Fault Code: " + fault.faultCode + "\n";
				strInfo += "Fault Info: " + fault.faultString + "\n";
				strInfo += "Fault Detail: " + fault.faultDetail;
				showError( strInfo );
			}
			
			private function generateClassBreakRenderer( graphicAC:ArrayCollection, colorArray:Array , alpha:Number):ClassBreaksRenderer
			{
				//得到数量的最大值和最小值
				var maxValue:Number = Number.MIN_VALUE;
				var minValue:Number = Number.MAX_VALUE;
				for each ( var graphic:Graphic in graphicAC )
				{
					var count:int = graphic.attributes.count;
					maxValue = Number.max( maxValue, count );
					minValue = Number.min( minValue, count );
				}
				
				var classCount:int = colorArray.length;
				var classMinValue:Number = int( minValue );
				var classBreakInfoArray:Array = [];
				
				for ( var i:int = 1; i <= classCount; i++ )
				{
					var classMaxValue:Number = int( minValue + ( maxValue - minValue ) * i / classCount );
					var classColor:Number = colorArray[i-1];
					var symbol:SimpleFillSymbol = new SimpleFillSymbol( "solid", classColor, alpha, 
						new SimpleLineSymbol( "solid", 0x000000, 1, 2 ) );
					var classBreakInfo:ClassBreakInfo = new ClassBreakInfo( symbol, 
						classMinValue, classMaxValue );
					classBreakInfoArray.push( classBreakInfo );
					
					classMinValue = classMaxValue + 0.00001;
				}
				
				var classBreaksRenderer:ClassBreaksRenderer = new ClassBreaksRenderer( 
					"count", null, classBreakInfoArray );
				return classBreaksRenderer;
			}
			
			private function queryLabels():void
			{
				var query:Query = new Query();
				query.returnGeometry = true;
				query.where = "1=1";
				query.outSpatialReference = map.spatialReference;
				query.outFields = [ "labelDirec", _labelPointLayerNameField ]
				_labelPointQueryTask.execute( query, new AsyncResponder( onResult, onFault ) );
				
				function onResult( featureSet:FeatureSet, token:Object = null ):void
				{
					for each ( var labelGraphic:Graphic in featureSet.features )
					{
						_labelPointGraphicAC.addItem( labelGraphic );
						/*var labelPointLayerName:String = labelGraphic.attributes[ _labelPointLayerNameField ];
						for each ( var polygonGraphic:Graphic in _polygonGraphicAC )
						{
							var polygonLayerName:String = polygonGraphic.attributes[ _polygonLayerNameField ];
							if ( labelPointLayerName == polygonLayerName )
							{
								trace( polygonLayerName, polygonGraphic.attributes.count );
								break;
							}
						}*/
					}
				}
			}
			
			//用于加载区县文字，如普陀区20
			private function generateLabels():void
			{
				_labelLayer.clear();
				for each ( var labelGraphic:Graphic in _labelPointGraphicAC )
				{
					var labelPointLayerName:String = labelGraphic.attributes[ _labelPointLayerNameField ];
					for each ( var polygonGraphic:Graphic in _districtGraphicAC )
					{
						var polygonLayerName:String = polygonGraphic.attributes[ _districtLayerNameField ];
						if ( labelPointLayerName == polygonLayerName )
						{
							var countAC:ArrayCollection = _districtTypeCountTable.find( labelPointLayerName );
							if ( countAC )
							{
								labelGraphic.attributes.countAC = countAC;
								labelGraphic.attributes.DistrictName = labelPointLayerName;
								labelGraphic.attributes.scale = map.scale;
								
								//var placement:String = labelGraphic.attributes["labelDirec"];
								/*var countSymbol:InfoSymbol = new InfoSymbol();
								countSymbol.infoRenderer = new ClassFactory( XinFangDianCountSymbol );
								countSymbol.infoPlacement = placement;*/
								labelGraphic.symbol = chartSymbol;
								
								_labelLayer.add( labelGraphic );
							}
							else
							{
								labelGraphic.attributes.countAC = new ArrayCollection();
								labelGraphic.attributes.DistrictName = labelPointLayerName;
								labelGraphic.attributes.scale = map.scale;
								labelGraphic.symbol = chartSymbol;
								
								_labelLayer.add( labelGraphic );
							}
							
							break;
						}
					}
				}
				
				cursorManager.removeBusyCursor();
			}
			
			private function generateLabels2():void
			{
				_labelLayer.clear();
				for each ( var polygonGraphic:Graphic in _blockGraphicAC )
				{
					var polygonLayerName:String = polygonGraphic.attributes[ _blockLayerNameField ];
					var countAC:ArrayCollection = _blockTypeCountTable.find( polygonLayerName );
					if ( countAC )
					{
						var labelGraphic:Graphic = new Graphic((polygonGraphic.geometry as Polygon).extent.center);
						labelGraphic.attributes = polygonGraphic.attributes;
						labelGraphic.attributes.countAC = countAC;
						labelGraphic.attributes.BlockName = polygonLayerName;
						//labelGraphic.attributes.scale = map.scale;
						
						//var placement:String = labelGraphic.attributes["labelDirec"];
						/*var countSymbol:InfoSymbol = new InfoSymbol();
						countSymbol.infoRenderer = new ClassFactory( XinFangDianCountSymbol );
						countSymbol.infoPlacement = placement;*/
						labelGraphic.symbol = chartSymbol2;
						_labelLayer.add( labelGraphic );
					}
					else
					{
						labelGraphic = new Graphic((polygonGraphic.geometry as Polygon).extent.center);
						labelGraphic.attributes = polygonGraphic.attributes;
						labelGraphic.attributes.countAC = new ArrayCollection();
						labelGraphic.attributes.BlockName = polygonLayerName;
						labelGraphic.symbol = chartSymbol2;
						_labelLayer.add( labelGraphic );
					}
				}
				
				cursorManager.removeBusyCursor();
			}
			
			private var _timeExpr:String = "";
			private var _typeExpr:String = "";
			
			private function getQueryExpr():String
			{
				var result:String = "";
				if ( _timeExpr == "" && _typeExpr != "" )
				{
					result = _typeExpr;
				}
				else if ( _timeExpr != "" && _typeExpr == "" )
				{
					result = _timeExpr;
				}
				else if ( _timeExpr != "" && _typeExpr != "" )
				{
					result = _timeExpr + " AND " + _typeExpr;
				}
				else
				{
					result = "1=1";
				}
				return result;
			}
			
			private function appevent_queryExpressionTimeHandler( event:AppEvent ):void
			{
				_timeExpr = event.data as String;
				trace(_timeExpr);
				queryXFD( getQueryExpr() );
			}
			
			private function appevent_queryExpressionTypeHandler( event:AppEvent ):void
			{
				_typeExpr = event.data as String;
				queryXFD( getQueryExpr() );
			}

			/**
			 * 统计点位中每个类型的数量
			 * 全部点位统计和每个区的点位统计,根据打钩确定统计哪些类型
			 * */
			private function statisticXFDCountByType():void
			{
				_districtTypeCountTable = new Hashtable();
				
				for each ( var graphic:Graphic in _xfdGraphicAC )
				{
					var districtName:String = graphic.attributes[_xfdDistrictNameField];
					var pointType:String = graphic.attributes[_xfdTypeField];
					
					if ( !_districtTypeCountTable.containsKey( districtName ) )
					{
						//初始化每个区的类型统计
						var countAC:ArrayCollection = new ArrayCollection();
						var found:Boolean = false;
						for each ( var typeName:String in _xfdTypeValueArray )
						{
							//图层中的类型字段值可能包含多个类型，所以用indexOf
							countAC.addItem( 
								{ 
									name: typeName, 
									count: pointType.indexOf( typeName ) == -1 ? 0 : 1
								} 
							);
							if(pointType.indexOf( typeName ) != -1)
								found = true;
						}
						countAC.addItem( 
							{ 
								name: "其他", 
								count: found==true?0:1 
							} 
						);
						_districtTypeCountTable.add( districtName, countAC );
					}
					else
					{
						countAC = _districtTypeCountTable.find( districtName );
						found = false;
						for each ( typeName in _xfdTypeValueArray )
						{
							if ( pointType.indexOf( typeName ) >= 0 )
							{
								for each ( var countObj:Object in countAC )
								{
									if ( countObj.name == typeName )
									{
										countObj.count++;
										break;
									}
								}
								found = true;
								break;
							}
						}
						//不在预先设置好的类型中都算在其他
						if ( !found )
						{
							for each ( countObj in countAC )
							{
								if ( countObj.name == "其他" )
								{
									countObj.count++;
									break;
								}
							}
						}
					}
				}
				
				//按照数量排序
				var sort:Sort = new Sort();
				sort.fields = [ new SortField( "count", true ) ];
				for each ( districtName in _districtTypeCountTable.getKeySet() )
				{
					countAC = _districtTypeCountTable.find( districtName );
					//去掉数量为0的分类
					for ( var i:int = 0; i < countAC.length; i++ )
					{
						countObj = countAC.getItemAt( i );
						if ( countObj.count == 0 )
						{
							countAC.removeItemAt( i );
							i--;
						}
					}
					countAC.sort = sort;
					countAC.refresh();
				}
				
				AppEvent.dispatch( AppEvent.HUANBAOJU_DISTRICT_TYPE_COUNT, _districtTypeCountTable );
			}
			
			private function statisticXFDCountByType2():void
			{
				_blockTypeCountTable = new Hashtable();
				
				for each ( var graphic:Graphic in _xfdGraphicAC )
				{
					var districtName:String = graphic.attributes[_xfdDistrictNameField];
					var blockName:String = graphic.attributes[_xfdBlockNameField];
					var pointType:String = graphic.attributes[_xfdTypeField];
					
					if(_currentDistrictName == "" || _currentDistrictName == districtName)
					{
						if ( !_blockTypeCountTable.containsKey( blockName ))
						{
							//初始化每个区的类型统计
							var countAC:ArrayCollection = new ArrayCollection();
							var found:Boolean = false;
							for each ( var typeName:String in _xfdTypeValueArray )
							{
								//图层中的类型字段值可能包含多个类型，所以用indexOf
								countAC.addItem( 
									{ 
										name: typeName, 
										count: pointType.indexOf( typeName ) == -1 ? 0 : 1
									} 
								);
								if(pointType.indexOf( typeName ) != -1)
									found = true;
							}
							countAC.addItem( 
								{ 
									name: "其他", 
									count: found==true?0:1  
								} 
							);
							_blockTypeCountTable.add( blockName, countAC );
						}
						else
						{
							countAC = _blockTypeCountTable.find( blockName );
							found = false;
							for each ( typeName in _xfdTypeValueArray )
							{
								if ( pointType.indexOf( typeName ) >= 0 )
								{
									for each ( var countObj:Object in countAC )
									{
										if ( countObj.name == typeName )
										{
											countObj.count++;
											break;
										}
									}
									found = true;
									break;
								}
							}
							//不在预先设置好的类型中都算在其他
							if ( !found )
							{
								for each ( countObj in countAC )
								{
									if ( countObj.name == "其他" )
									{
										countObj.count++;
										break;
									}
								}
							}
						}
					}
				}
				
				//按照数量排序
				var sort:Sort = new Sort();
				sort.fields = [ new SortField( "count", true ) ];
				for each ( blockName in _blockTypeCountTable.getKeySet() )
				{
					countAC = _blockTypeCountTable.find( blockName );
					//去掉数量为0的分类
					for ( var i:int = 0; i < countAC.length; i++ )
					{
						countObj = countAC.getItemAt( i );
						if ( countObj.count == 0 )
						{
							countAC.removeItemAt( i );
							i--;
						}
					}
					countAC.sort = sort;
					countAC.refresh();
				}
				
				AppEvent.dispatch( AppEvent.HUANBAOJU_BLOCK_TYPE_COUNT, _blockTypeCountTable );
			}
			
			private function districtLayerGraphic_doubleClickHandler(event:MouseEvent ):void
			{
				var graphic:Graphic = event.currentTarget as Graphic;
				map.extent = graphic.geometry.extent;
				if(map.scale > 100000)
					map.scale = 100000;
				_currentDistrictName = graphic.attributes[ _districtLayerNameField ];
				zoomToDistrict();
			}
			
			private function zoomToDistrict():void
			{
				_districtLayer.visible = false;
				_blockLayer.visible = true;
				_streetLayer.visible = false;
				_labelLayer.clear();
				
				_xfdTable2.clear();
				_blockTotalCountAC.removeAll();
				if ( _xfdTable.containsKey( _currentDistrictName ) )
				{
					for each ( var graphic:Graphic in (_xfdTable.find( _currentDistrictName ) as Array) )
					{
						//var districtName:String = graphic.attributes[ _xfdDistrictNameField ];
						blockName = graphic.attributes[ _xfdBlockNameField ];
						if ( _xfdTable2.containsKey( blockName ) )
						{
							var xfdGraphicArray:Array = _xfdTable2.find( blockName );
							xfdGraphicArray.push( graphic );
						}
						else
						{
							_xfdTable2.add( blockName, [ graphic ] );
						}
					}
					
					for each (var blockName:String in _xfdTable2.getKeySet() )
					{
						var blockCount:BlockCount = new BlockCount();
						blockCount.blockName = blockName;
						blockCount.count = (_xfdTable2.find( blockName ) as Array).length;
						_blockTotalCountAC.addItem( blockCount );
					}
					
					var sort:Sort = new Sort();
					sort.fields = [ new SortField( "count", true ) ];
					_blockTotalCountAC.sort = sort;
					_blockTotalCountAC.refresh();
					AppEvent.dispatch( AppEvent.HUANBAOJU_BLOCK_COUNT, _blockTotalCountAC ); //发送给下面弹出的模块进行柱状图展示,现在不发送，等选中过滤后再发送
					
					queryBlock();
				}
			}
			
			private function blockLayerGraphic_doubleClickHandler(event:MouseEvent):void
			{
//				if(map.scale <= 100000)
//				{
//					map.scale = 288572;
//					_districtLayer.visible = true;
//					_blockLayer.visible = false;
//					generateLabels();
//				}
//				
//				AppEvent.dispatch( AppEvent.HUANBAOJU_DISTRICT_COUNT, _districtTotalCountAC );
//				AppEvent.dispatch( AppEvent.HUANBAOJU_DISTRICT_TYPE_COUNT, _districtTypeCountTable );
//
//				//_districtLayer.visible = _labelLayer.visible = ( map.scale > 100000 ); //比例尺小于100000时显示区县和标注
//				AppEvent.dispatch( AppEvent.CHANGE_LAYER_VISIBILITY_BY_NAME, //比例尺大于100000时显示街道层
//					{ 
//						serviceName: "街道",
//						layerIds: "",
//						visible: (map.scale <= 100000)
//					} 
//				);
				
				//修改放大到街道
				var graphic:Graphic = event.currentTarget as Graphic;
				map.extent = graphic.geometry.extent;
				if(map.scale > 18036)
					map.scale = 18036;
				_currentBlockName = graphic.attributes[ _blockLayerNameField ];
				zoomToBlock();
			}
			
			private function zoomToBlock():void
			{
				_districtLayer.visible = false;
				_blockLayer.visible = false;
				_streetLayer.visible = true;
				_labelLayer.clear();
				
				for each ( var blockGraphic:Graphic in _blockGraphicAC )
				{
					if ( _currentBlockName == blockGraphic.attributes[ _blockLayerNameField ] )
					{
						var polygonGraphic:Graphic = new Graphic();
						polygonGraphic.geometry = blockGraphic.geometry;
						polygonGraphic.symbol = new SimpleFillSymbol("solid", 0xFFFFFF, 0, 
							new SimpleLineSymbol( "solid", 0xFF0000, 1, 5 ) );
						_streetLayer.add(polygonGraphic);
						
						polygonGraphic.addEventListener( MouseEvent.DOUBLE_CLICK, streetLayerGraphic_doubleClickHandler );
						
						var labelGraphic:Graphic = new Graphic((polygonGraphic.geometry as Polygon).extent.center);
						labelGraphic.attributes = blockGraphic.attributes;
						labelGraphic.attributes.BlockName = _currentBlockName;
						labelGraphic.symbol = chartSymbol3;
						_labelLayer.add( labelGraphic );
						break;
					}
				}
			}
			
			private function streetLayerGraphic_doubleClickHandler(event:MouseEvent):void
			{
				for each ( var districtGraphic:Graphic in _districtGraphicAC )
				{
					if ( _currentDistrictName == districtGraphic.attributes[ _districtLayerNameField ] )
					{
						map.extent = districtGraphic.geometry.extent;
						if(map.scale > 100000)
							map.scale = 100000;
						break;
					}
				}
				
				//zoomToDistrict();
				_districtLayer.visible = false;
				_blockLayer.visible = true;
				_streetLayer.visible = false;
				_streetLayer.clear();
				map.infoWindow.hide();
				//generateLabels2();
			}
			
			private function appevent_HuanBaoJuDistrictSelectedHandler( event:AppEvent ):void
			{
				_currentDistrictName = event.data as String;
				
				for each ( var districtGraphic:Graphic in _districtGraphicAC )
				{
					if ( _currentDistrictName == districtGraphic.attributes[ _districtLayerNameField ] )
					{
						map.extent = districtGraphic.geometry.extent;
						if(map.scale > 100000)
							map.scale = 100000;
						break;
					}
				}
				
				zoomToDistrict();
			}
			
			private var _currentBlockName:String = "";
			private function appevent_HuanBaoJuBlockSelectedHandler( event:AppEvent ):void
			{
				_currentBlockName = event.data as String;
				
				for each ( var blockGraphic:Graphic in _blockGraphicAC )
				{
					if ( _currentBlockName == blockGraphic.attributes[ _blockLayerNameField ] )
					{
						map.extent = blockGraphic.geometry.extent;
						if(map.scale > 18036)
							map.scale = 18036;
						break;
					}
				}
				
				zoomToBlock();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<esri:InfoSymbol id="chartSymbol" 
						 containerStyleName="arrowInfoSymbolStyle"
						 infoPlacement="center" 
						 infoRenderer="cn.seisys.TGISViewer.skins.InfoSymbol.HuanBaoJu.XinFangDianCountSymbol"/>
		
		<esri:InfoSymbol id="chartSymbol2" 
						 containerStyleName="arrowInfoSymbolStyle"
						 infoPlacement="center" 
						 infoRenderer="cn.seisys.TGISViewer.skins.InfoSymbol.HuanBaoJu.XinFangDianCountSymbol2"/>
		
		<esri:InfoSymbol id="chartSymbol3" 
						 containerStyleName="arrowInfoSymbolStyle"
						 infoPlacement="center" 
						 infoRenderer="cn.seisys.TGISViewer.skins.InfoSymbol.HuanBaoJu.XinFangDianCountSymbol3"/>
		
		<mx:SeriesInterpolate id="interpolateIn" duration="1000"/>
	</fx:Declarations>
	
	<!--<mx:ColumnChart id="chartDistrictTotalCount"
					width="100%" height="100%" 
					dataProvider="{_districtTotalCountAC}" 
					showDataTips="true" 
					fontSize="16">
		<mx:horizontalAxis>
			<mx:CategoryAxis categoryField="districtName"/>
		</mx:horizontalAxis>
		
		<mx:series>
			<mx:ColumnSeries xField="districtName" yField="totalCount" 
							 showDataEffect="{interpolateIn}" />
		</mx:series>
	</mx:ColumnChart >-->
</TGISViewer:BaseWidget>
