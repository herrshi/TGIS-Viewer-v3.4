<?xml version="1.0" encoding="utf-8"?>
<!-- 
///////////////////////////////////////////////////////////////////////////
//在后台执行缓冲搜索
//搜索完成后调用js函数receiveSearchResult。
//可能会循环调用此功能，
//为了在返回时加以区分，在调用时传一个token，
//返回结果放入token。
//搜索时要分别搜索图层和overlay，都是异步的。
//所以设置两个标志位，两部分搜索都完成时才返回
///////////////////////////////////////////////////////////////////////////
-->
<TGISViewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:TGISViewer="cn.seisys.TGISViewer.*" 
					   xmlns:esri="http://www.esri.com/2008/ags"
					   layout="absolute" 
					   creationComplete="creationCompleteHandler(event)" 
					   widgetConfigLoaded="widgetConfigLoadedHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Units;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.renderers.IRenderer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tasks.GeometryServiceSingleton;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.ags.utils.GeometryUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.utils.UIDUtil;
			
			import cn.seisys.TGISViewer.AppEvent;
			import cn.seisys.TGISViewer.components.PopUpInfoWithButtons;
			import cn.seisys.TGISViewer.utils.Hashtable;
			import cn.seisys.TGISViewer.utils.MapServiceUtil;
			import cn.seisys.TGISViewer.utils.PopUpInfoParser;
			import cn.seisys.TGISViewer.utils.RendererParser;
			
			[Bindable] private var _searchUrl:String;
			private var _searchLayerIds:Array;
			
			private var _popUpRendererTable:Hashtable;
			
			private var _type:String;
			
			private var _bufferLayer:GraphicsLayer;
			private var _defaultBufferDistance:Number;
			
			private var _searchOverlayerInfoArray:Array = [];
			
			/**
			 * 搜索结果
			 * <listing>
			 * key: token
			 * item: 
			 * {
			 *   searchLayerComplete: Boolean, 图层搜索结束标志
			 *   searchLayerResult: ArrayCollection, 图层搜索结果
			 *   searchOverlayComplete: Boolean, overlay搜索结束标志
			 *   searchOverlayResult: ArrayCollection, overlay搜索结果
			 * }
			 * </listing>
			 * */
			private var _searchResultTable:Hashtable;
			
			private var _searchResultLayer:GraphicsLayer;
			private var _showSearchResult:Boolean;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_popUpRendererTable = new Hashtable();
				_searchResultTable = new Hashtable();
				
				_bufferLayer = new GraphicsLayer();
				var selectionColor:Number = getStyle( "selectionColor" );
				_bufferLayer.symbol = new SimpleFillSymbol( "solid", selectionColor, 0.2, 
					new SimpleLineSymbol( "solid", selectionColor, 1, 2 ) );
				map.addLayer( _bufferLayer );
				map.reorderLayer( _bufferLayer.id, 1 );
				
				_searchResultLayer = new GraphicsLayer();
				_searchResultLayer.name = "SearchResultLayer";
				map.addLayer( _searchResultLayer );
				
				geometryService.url = GeometryServiceSingleton.instance.url;
				geometryService.token = GeometryServiceSingleton.instance.token;
				geometryService.proxyURL = GeometryServiceSingleton.instance.proxyURL;
				
				AppEvent.addListener( AppEvent.BUFFER_SEARCH, appevent_BufferSearchHandler );
				AppEvent.addListener( AppEvent.CLEAR_BUFFER_SEARCH, appevent_clearBufferSearchHandler );
			}
			
			protected function widgetConfigLoadedHandler(event:Event):void
			{
				if ( configXML )
				{
					_type = configXML.type;
					
					_defaultBufferDistance = configXML.defaultbufferdistance || 500;
					
					_searchUrl = configXML.layerinfo.find.url;
					if ( configData.arcgisServerIP )
					{
						_searchUrl = _searchUrl.replace( "{serverip}", configData.arcgisServerIP );
					}
					var layerIdString:String = configXML.layerinfo.find.layerids;
					if ( layerIdString )
					{
						_searchLayerIds = layerIdString.split( "," );
					}
					
					//popup
					for each ( var popUpXML:XML in configXML.layerinfo.popups.popup )
					{
						var layerName:String = popUpXML.@layername;
						var popUpInfo:PopUpInfoWithButtons = PopUpInfoParser.parsePopUpInfo( popUpXML );
						
						var popUpRenderer:ClassFactory = new ClassFactory( PopUpRenderer );
						popUpRenderer.properties = 
							{ 
								popUpInfo: popUpInfo
							};
						_popUpRendererTable.add( layerName, popUpRenderer );
					}
					
					_showSearchResult = configXML.showsearchresult == "true" ? true : false;
					if ( _showSearchResult )
					{
						//renderer
						var rendererParser:RendererParser = new RendererParser();
						var renderer:IRenderer = rendererParser.parseRenderer( configXML.layerinfo[0] );
						_searchResultLayer.renderer = renderer;
					}
					
					
					//overlay
					if ( configXML.overlays[0] )
					{
						for each ( var overlayXML:XML in configXML.overlays[0].overlay )
						{
							var name:String = overlayXML.@name;
							var label:String = overlayXML.@label;
							var titleField:String = overlayXML.@titlefield;
							var idField:String = overlayXML.@idfield;
							var selected:Boolean = overlayXML.@defaultselected == "false" ? false : true;
							
							_searchOverlayerInfoArray.push( 
								{ 
									name: name,
									label: label,
									titleField: titleField,
									idField: idField,
									selected: selected
								} 
							);
						}
					}
				}
			}
			
			private var _bufferSearchCenterPoint:MapPoint;
			
			private function appevent_BufferSearchHandler( event:AppEvent ):void
			{
				_bufferLayer.clear();
				_searchResultLayer.clear();
				
				var type:String = event.data.type;
				if ( type == _type )
				{
					var token:String = event.data.token;
					if ( !token )
					{
						token = UIDUtil.createUID();
					}
					//新建一个searchResult对象并放入HashTable
					var searchResultObj:Object = new Object();
					//不用搜索Layer则将layer搜索完成标志设为true
					searchResultObj.searchLayerComplete =  ( _searchUrl == "" ? true : false );
					//不用搜索Overlay则将overlay搜索完成标志设为true
					searchResultObj.searchOverlayComplete = ( _searchOverlayerInfoArray.length == 0 ? true : false );
					_searchResultTable.add( token, searchResultObj );
					
					_bufferSearchCenterPoint = event.data.point;
					_bufferSearchCenterPoint.spatialReference = map.spatialReference;
					var bufferDistance:Number = event.data.distance || _defaultBufferDistance;
					bufferSearch( _bufferSearchCenterPoint, bufferDistance, token );
				}
			}
			
			private function bufferSearch( centerPt:MapPoint, distance:Number, token:String = "" ):void
			{
				bufferParam.geometries = [ centerPt ];
				bufferParam.distances = [ distance ];
				geometryService.buffer( bufferParam, 
					new AsyncResponder( geometryService_bufferCompleteHandler, faultHandler, token ) );
			}
			
			private function geometryService_bufferCompleteHandler( item:Object, token:Object = null ):void
			{
				var bufferResultArray:Array = item as Array;
				for ( var i:uint = 0; i < bufferResultArray.length; i++ )
				{
					var bufferPolygon:Polygon = bufferResultArray[i] as Polygon;
					bufferPolygon.spatialReference = map.spatialReference;
					_bufferLayer.add( new Graphic( bufferPolygon ) );
					
					if ( _searchUrl != "" )
					{
						identifyLayers( bufferPolygon, token as String );
					}
					if ( _searchOverlayerInfoArray.length > 0 )
					{
						searchOverlay( bufferPolygon, token as String );
					}
					
				}
			}
			
			private function faultHandler( fault:Fault, token:Object ):void
			{
				var strInfo: String = "Error: ";
				strInfo += "Fault Code: " + fault.faultCode + "\n";
				strInfo += "Fault Info: " + fault.faultString + "\n";
				strInfo += "Fault Detail: " + fault.faultDetail;
				showError( strInfo );
			}
			
			/**
			 * 搜索图层在某个geometry内的要素，调用IdentifyTask接口
			 * */
			private function identifyLayers( geom:Geometry, token:String ):void 
			{
				identifyParam.geometry = geom;
				if ( _searchLayerIds && _searchLayerIds.length > 0 )
				{
					identifyParam.layerIds = _searchLayerIds;
				}
				identifyTask.execute( 
					identifyParam, 
					new AsyncResponder( identifyTask_executeCompleteHandler, faultHandler, token ) );
			}
			
			protected function identifyTask_executeCompleteHandler( item:Object, tag:Object = null ):void
			{
				var results:Array = item as Array;
				var token:String = tag as String;
				if ( results && results.length > 0 )
				{
					var searchResultAC:ArrayCollection = new ArrayCollection();
					for each ( var identifyResult:IdentifyResult in results )
					{
						var layerName:String = identifyResult.layerName;
						var graphic:Graphic = identifyResult.feature;
						var popUpRenderer:ClassFactory = _popUpRendererTable.find( layerName );
						if ( !popUpRenderer )
						{
							popUpRenderer = _popUpRendererTable.find( "default" );
						}
						var popUpInfo:PopUpInfoWithButtons = popUpRenderer.properties.popUpInfo;
						var idFieldName:String = popUpInfo.idFieldName;
						graphic.id = graphic.attributes[idFieldName];
						graphic.attributes.layerName = layerName;
						if ( _showSearchResult )
						{
							graphic.infoWindowRenderer = popUpRenderer;
							_searchResultLayer.add( graphic );
						}
						
						var layerNode:Object = getLayerNode( searchResultAC, layerName );
						var children:ArrayCollection = layerNode.children;
						children.addItem( 
							{ 
								label:label, 
								graphic:graphic
							} 
						);
					}
					
					var searchResultObj:Object = _searchResultTable.find( token );
					searchResultObj.searchLayerComplete = true;
					searchResultObj.searchLayerResult = searchResultAC;
					sendResult( token );
				}
			}
			
			private function getLayerNode( searchResult:ArrayCollection, layerName:String ):Object
			{
				var layerNode:Object;
				for each ( layerNode in searchResult )
				{
					if ( layerNode.label == layerName )
					{
						return layerNode;
					}
				}
				
				layerNode = 
					{ 
						label: layerName, 
						children: new ArrayCollection() 
					};
				searchResult.addItem( layerNode );
				return layerNode;
			}
			
			/**
			 * 搜索动态图层在某个geometry内的要素，调用GeometryService的relation接口
			 * */
			private function searchOverlay( geom:Geometry, token:String = "" ):void
			{
				//请求所有数据，筛选其中的overlay数据
				AppEvent.dispatch( AppEvent.DATA_FETCH_ALL, null, dataAllFetchedHandler );
				
				function dataAllFetchedHandler( dataTable:Hashtable ):void
				{
					var dataTable:Hashtable = dataTable;
					var overlayGeometryArray:Array = [];
					var overlayGraphicArray:Array = [];
					
					for each ( var overlayObj:Object in _searchOverlayerInfoArray )
					{
						var overlayName:String = overlayObj.name;
						var graphicProvider:ArrayCollection = dataTable.find( overlayName ) as ArrayCollection;
						if ( graphicProvider && graphicProvider.length > 0 )
						{
							for each ( var graphic:Graphic in graphicProvider )
							{
								graphic.geometry.spatialReference = map.spatialReference;
								graphic.attributes.overlayName = overlayName;
								graphic.attributes.overlayLabel = overlayObj.label;
								graphic.attributes.titleField = overlayObj.titleField;
								overlayGraphicArray.push( graphic );
								overlayGeometryArray.push( graphic.geometry );
							}
						}
					}
					
					if ( overlayGeometryArray.length > 0 )
					{
						relationParams.geometries1 = overlayGeometryArray;
						relationParams.geometries2 = [geom];
						var tag:Object = 
							{ 
								token: token, 
								graphicArray: overlayGraphicArray
							};
						geometryService.relation( 
							relationParams, 
							new AsyncResponder( geometryService_relationCompleteHandler, faultHandler, tag) 
						);
					}
				}
			}
			
			private function geometryService_relationCompleteHandler( item:Object, tag:Object = null ):void
			{
				var result:Array = item as Array;
				var graphicArray:Array = tag.graphicArray;
				var token:String = tag.token;
				var searchResultAC:ArrayCollection = new ArrayCollection();
				
				for each (var obj:Object in result)
				{
					var resultPoint:MapPoint = obj.geometry1 as MapPoint;
					var overlayGraphic:Graphic = new Graphic( resultPoint );
					
					for each ( var graphic:Graphic in graphicArray )
					{
						var overlayPoint:MapPoint = graphic.geometry as MapPoint;
						if ( resultPoint.x == overlayPoint.x && resultPoint.y == overlayPoint.y )
						{
							var overlayName:String = graphic.attributes.overlayName;
							var overlayLabel:String = graphic.attributes.overlayLabel;
							var titleField:String = graphic.attributes.titleField;
							
							overlayGraphic.attributes = graphic.attributes;
							overlayGraphic.attributes.layerName = overlayName;
							overlayGraphic.id = graphic.id;
							
							var layerNode:Object = getLayerNode( searchResultAC, overlayLabel );
							var children:ArrayCollection = layerNode.children;
							children.addItem( 
								{ 
									label: graphic.attributes[titleField], 
									graphic: overlayGraphic
								} 
							);
							break;
						}
					} 
				}
				
				var searchResultObj:Object = _searchResultTable.find( token );
				searchResultObj.searchOverlayComplete = true;
				searchResultObj.searchOverlayResult = searchResultAC;
				sendResult( token );
			}
			
			/**
			 * 整理合并搜索结果，调用receiveSearchResult函数向页面发送数据
			 * */
			private function sendResult( token:String ):void
			{
				var searchResultObj:Object = _searchResultTable.find( token );
				//layer和overlay搜索都完成时再发送数据
				if (!searchResultObj || !searchResultObj.searchLayerComplete || !searchResultObj.searchOverlayComplete )
				{
					return;
				}
				
				//合并图层和overlay搜索结果
				var searchResultAC:ArrayCollection;
				var searchLayerResultAC:ArrayCollection = searchResultObj.searchLayerResult;
				var searchOverlayResultAC:ArrayCollection = searchResultObj.searchOverlayResult;
				if ( searchLayerResultAC && !searchOverlayResultAC )
				{
					searchResultAC  = searchLayerResultAC;
				}
				else if ( !searchLayerResultAC && searchOverlayResultAC  )
				{
					searchResultAC = searchOverlayResultAC;
				}
				else if ( searchLayerResultAC && searchOverlayResultAC )
				{
					searchResultAC  = searchLayerResultAC;
					searchResultAC.source = searchResultAC.source.concat( searchOverlayResultAC.source );
				}
				else
				{
					return;
				}
				
				var data:Array = [];
				
				for each ( var layerNode:Object in searchResultAC )
				{
					var layerName:String = layerNode.label;
					var children:ArrayCollection = layerNode.children;
					
					var points:Array = [];
					var layerObj:Object = 
						{ 
							type: layerName, 
							points: points 
						};
					
					for each ( var deviceNode:Object in children )
					{
						var graphic:Graphic = deviceNode.graphic;
						var centerPoint:MapPoint = MapServiceUtil.getGeomCenter( graphic );
						var id:String = graphic.id;
						var deviceObj:Object = 
							{ 
								id: id, 
								x: centerPoint.x, 
								y: centerPoint.y 
							};
						
						//计算距离
						if ( _bufferSearchCenterPoint )
						{
							var polyline:Polyline = new Polyline();
							var path:Array = [ _bufferSearchCenterPoint, centerPoint ];
							polyline.addPath( path );
							var lengthResultArray:Array = GeometryUtil.geodesicLengths( 
								[polyline], Units.METERS );
							var distance:int = Math.round( lengthResultArray[0] );
							deviceObj.distance = distance;
						}
						points.push( deviceObj );
					}
					if ( points.length > 0 )
					{
						//按照距离排序
						if ( _bufferSearchCenterPoint )
						{
							points.sortOn( "distance", Array.NUMERIC );
						}
						
						data.push( layerObj );
					}
				}
				
				if ( data.length > 0 )
				{
					var result:Object = 
						{ 
							type: _type,
							token: token, 
							data: data 
						};
					
					var resultString:String = JSON.stringify( result );
					AppEvent.dispatch( AppEvent.EXTERNALINTERFACE_CALL, 
						{ 
							functionName: "receiveSearchResult",
							params: [ resultString ]
						} 
					);
				}
				
				//删除已发送的数据
				_searchResultTable.remove( token );
			}
			
			private function appevent_clearBufferSearchHandler( event:AppEvent ):void
			{
				var type:String = event.data as String;
				if ( type == _type )
				{
					_bufferLayer.clear();
					_searchResultLayer.clear();
					_searchResultTable.clear();
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:GeometryService id="geometryService"/>
		
		<esri:BufferParameters id="bufferParam" 
							   unit="{GeometryService.UNIT_METER}" 
							   outSpatialReference="{map.spatialReference}"
							   geodesic="true"/>
		
		<esri:RelationParameters id="relationParams" 
								 spatialRelationship="{RelationParameters.SPATIAL_REL_WITHIN}"/>
		
		<esri:IdentifyTask id="identifyTask" 
						   url="{_searchUrl}"/>
		
		<esri:IdentifyParameters id="identifyParam" 
								 returnGeometry="true" 
								 tolerance="3"
								 layerOption="all"
								 width="{map.width}" height="{map.height}" 
								 mapExtent="{map.extent}" 
								 spatialReference="{map.spatialReference}"/>
	</fx:Declarations>
</TGISViewer:BaseWidget>
